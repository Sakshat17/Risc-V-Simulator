# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'something.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
# @Ritik - I have changed just two colors - green and yellow

from PyQt5 import QtCore, QtGui, QtWidgets
import sys
from . import main


class Ui_Simulator(object):
    def setupUi(self, Simulator):
        ui.run = False
        ui.isCompleted = False
        self.prevRd = -1
        self.currRd = -1
        self.green = QtGui.QColor(80, 220, 120)
        self.white = QtGui.QColor('white')
        self.registerColor = QtGui.QColor(255, 234, 167)
        self.currentInstruction = 0
        self.nextInstruction = 0
        self.resetID = 0
        Simulator.setObjectName("Simulator")
        Simulator.resize(1000, 841)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 117, 128))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 117, 128))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 117, 128))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 117, 128))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0,0,0))
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Text, brush)
        Simulator.setPalette(palette)
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        Simulator.setFont(font)
        self.groupBox = QtWidgets.QGroupBox(Simulator)
        self.groupBox.setGeometry(QtCore.QRect(730, 50, 231, 761))
        font.setFamily("Comic Sans MS")
        font.setPointSize(11)
        self.groupBox.setFont(font)
        self.groupBox.setAlignment(QtCore.Qt.AlignCenter)
        self.groupBox.setObjectName("groupBox")
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        self.groupBox.setPalette(palette)
        self.registers = QtWidgets.QListWidget(self.groupBox)
        self.registers.setAlternatingRowColors(True)
        self.registers.setGeometry(QtCore.QRect(5, 30, 220, 725))
        font.setFamily("Comic Sans MS")
        font.setPointSize(10)
        self.registers.setFont(font)
        self.registers.setObjectName("registers")
        item = QtWidgets.QListWidgetItem()
        self.registers.addItem(item)
        #t.item(1)->setForeground(Qt::blue);
        item = QtWidgets.QListWidgetItem()
        self.registers.addItem(item)
        item = QtWidgets.QListWidgetItem()
        self.registers.addItem(item)
        item = QtWidgets.QListWidgetItem()
        self.registers.addItem(item)
        item = QtWidgets.QListWidgetItem()
        self.registers.addItem(item)
        item = QtWidgets.QListWidgetItem()
        self.registers.addItem(item)
        item = QtWidgets.QListWidgetItem()
        self.registers.addItem(item)
        item = QtWidgets.QListWidgetItem()
        self.registers.addItem(item)
        item = QtWidgets.QListWidgetItem()
        self.registers.addItem(item)
        item = QtWidgets.QListWidgetItem()
        self.registers.addItem(item)
        item = QtWidgets.QListWidgetItem()
        self.registers.addItem(item)
        item = QtWidgets.QListWidgetItem()
        self.registers.addItem(item)
        item = QtWidgets.QListWidgetItem()
        self.registers.addItem(item)
        item = QtWidgets.QListWidgetItem()
        self.registers.addItem(item)
        item = QtWidgets.QListWidgetItem()
        self.registers.addItem(item)
        item = QtWidgets.QListWidgetItem()
        self.registers.addItem(item)
        item = QtWidgets.QListWidgetItem()
        self.registers.addItem(item)
        item = QtWidgets.QListWidgetItem()
        self.registers.addItem(item)
        item = QtWidgets.QListWidgetItem()
        self.registers.addItem(item)
        item = QtWidgets.QListWidgetItem()
        self.registers.addItem(item)
        item = QtWidgets.QListWidgetItem()
        self.registers.addItem(item)
        item = QtWidgets.QListWidgetItem()
        self.registers.addItem(item)
        item = QtWidgets.QListWidgetItem()
        self.registers.addItem(item)
        item = QtWidgets.QListWidgetItem()
        self.registers.addItem(item)
        item = QtWidgets.QListWidgetItem()
        self.registers.addItem(item)
        item = QtWidgets.QListWidgetItem()
        self.registers.addItem(item)
        item = QtWidgets.QListWidgetItem()
        self.registers.addItem(item)
        item = QtWidgets.QListWidgetItem()
        self.registers.addItem(item)
        item = QtWidgets.QListWidgetItem()
        self.registers.addItem(item)
        item = QtWidgets.QListWidgetItem()
        self.registers.addItem(item)
        item = QtWidgets.QListWidgetItem()
        self.registers.addItem(item)
        item = QtWidgets.QListWidgetItem()
        self.registers.addItem(item)
        self.groupBox_2 = QtWidgets.QGroupBox(Simulator)
        self.groupBox_2.setAlignment(QtCore.Qt.AlignCenter)
        # self.groupBox_2.setGeometry(QtCore.QRect(500, 50, 191, 401))
        self.groupBox_2.setGeometry(QtCore.QRect(470, 50, 221, 410))
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(10)
        self.groupBox_2.setFont(font)
        self.groupBox_2.setObjectName("groupBox_2")
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        self.groupBox_2.setPalette(palette)
        self.instructionSegment = QtWidgets.QListWidget(self.groupBox_2)
        self.instructionSegment.setAlternatingRowColors(True)
        # self.instructionSegment.setGeometry(QtCore.QRect(5, 21, 181, 371))
        self.instructionSegment.setGeometry(QtCore.QRect(5, 30, 211, 371))
        self.instructionSegment.setObjectName("instructionSegment")
        self.groupBox_3 = QtWidgets.QGroupBox(Simulator)
        # self.groupBox_3.setGeometry(QtCore.QRect(500, 490, 191, 321))
        self.groupBox_3.setGeometry(QtCore.QRect(470, 470, 221, 339))
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(11)
        self.groupBox_3.setFont(font)
        self.groupBox_3.setAlignment(QtCore.Qt.AlignCenter)
        self.groupBox_3.setObjectName("groupBox_3")
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        self.groupBox_3.setPalette(palette)
        self.dataSegment = QtWidgets.QListWidget(self.groupBox_3)
        self.dataSegment.setAlternatingRowColors(True)
        # self.dataSegment.setGeometry(QtCore.QRect(5, 21, 181, 291))
        self.dataSegment.setGeometry(QtCore.QRect(5, 30, 211, 300))
        self.dataSegment.setObjectName("dataSegment")
        self.Run = QtWidgets.QPushButton(Simulator)
        self.Run.clicked.connect(run)
        self.Run.setGeometry(QtCore.QRect(40, 60, 81, 41))
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(11)
        self.Run.setFont(font)
        self.Run.setObjectName("Run")
        self.Step = QtWidgets.QPushButton(Simulator)
        self.Step.clicked.connect(step)
        self.Step.setGeometry(QtCore.QRect(160, 60, 81, 41))
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(11)
        self.Step.setFont(font)
        self.Step.setObjectName("Step")
        self.Reset = QtWidgets.QPushButton(Simulator)
        self.Reset.setGeometry(QtCore.QRect(270, 60, 81, 41))
        self.Reset.clicked.connect(reset)
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(11)
        self.Reset.setFont(font)
        self.Reset.setObjectName("Reset")
        self.clockCycles = QtWidgets.QLineEdit(Simulator)
        self.clockCycles.setGeometry(QtCore.QRect(40, 120, 311, 31))
        font = QtGui.QFont("Montserrat")
        font.setPointSize(11)
        self.clockCycles.setFont(font)
        self.clockCycles.setObjectName("clockCycles")
        self.PC = QtWidgets.QLineEdit(Simulator)
        self.PC.setGeometry(QtCore.QRect(40, 170, 311, 31))
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(11)
        self.PC.setFont(font)
        self.PC.setObjectName("PC")
        self.IR = QtWidgets.QLineEdit(Simulator)
        self.IR.setGeometry(QtCore.QRect(40, 220, 311, 31))
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(11)
        self.IR.setFont(font)
        self.IR.setObjectName("IR")
        self.groupBox_4 = QtWidgets.QGroupBox(Simulator)
        self.groupBox_4.setGeometry(QtCore.QRect(20, 280, 411, 300))
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(11)
        self.groupBox_4.setFont(font)
        self.groupBox_4.setAlignment(QtCore.Qt.AlignCenter)
        self.groupBox_4.setObjectName("groupBox_4")
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        self.groupBox_4.setPalette(palette)
        self.label = QtWidgets.QLabel(self.groupBox_4)
        self.label.setGeometry(QtCore.QRect(120, 55, 71, 20))
        self.label.setObjectName("label")
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(12)
        self.label.setFont(font)
        self.fetch = QtWidgets.QLineEdit(self.groupBox_4)
        self.fetch.setGeometry(QtCore.QRect(195, 51, 185, 31))
        self.fetch.setObjectName("fetch")
        self.decode = QtWidgets.QLineEdit(self.groupBox_4)
        self.decode.setGeometry(QtCore.QRect(195, 100, 185, 31))
        self.decode.setObjectName("decode")
        self.label_2 = QtWidgets.QLabel(self.groupBox_4)
        self.label_2.setGeometry(QtCore.QRect(104, 104, 81, 20))
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(12)
        font.setBold(False)
        font.setWeight(50)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.execute = QtWidgets.QLineEdit(self.groupBox_4)
        self.execute.setGeometry(QtCore.QRect(195, 149, 185, 31))
        self.execute.setObjectName("execute")
        self.label_3 = QtWidgets.QLabel(self.groupBox_4)
        self.label_3.setGeometry(QtCore.QRect(105, 153, 91, 20))
        self.label_3.setObjectName("label_3")
        self.memoryAccess = QtWidgets.QLineEdit(self.groupBox_4)
        self.memoryAccess.setGeometry(QtCore.QRect(195, 198, 185, 31))
        self.memoryAccess.setObjectName("memoryAccess")
        self.label_4 = QtWidgets.QLabel(self.groupBox_4)
        self.label_4.setGeometry(QtCore.QRect(41, 202, 161, 20))
        self.label_4.setObjectName("label_4")
        self.registerUpdate = QtWidgets.QLineEdit(self.groupBox_4)
        self.registerUpdate.setGeometry(QtCore.QRect(195, 247, 185, 31))
        self.registerUpdate.setObjectName("registerUpdate")
        self.label_5 = QtWidgets.QLabel(self.groupBox_4)
        self.label_5.setGeometry(QtCore.QRect(34, 251, 171, 31))
        self.label_5.setObjectName("label_5")

        self.groupBox_5 = QtWidgets.QGroupBox(Simulator)
        self.groupBox_5.setGeometry(QtCore.QRect(19, 598, 411, 212))
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(11)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        self.groupBox_5.setPalette(palette)
        self.groupBox_5.setFont(font)
        self.groupBox_5.setAlignment(QtCore.Qt.AlignCenter)
        self.groupBox_5.setObjectName("groupBox_5")
        self.display = QtWidgets.QTextEdit(self.groupBox_5)
        self.display.setGeometry(QtCore.QRect(10, 30, 391, 172))
        self.display.setObjectName("display")
        self.display.setReadOnly(True)

        self.retranslateUi(Simulator)
        QtCore.QMetaObject.connectSlotsByName(Simulator)
        self.makeReadOnly()
        self.updateRegisters()

    def retranslateUi(self, Simulator):
        _translate = QtCore.QCoreApplication.translate
        Simulator.setWindowTitle(_translate("Simulator", "RISC-V Simulator Phase 1"))
        self.groupBox.setTitle(_translate("Simulator", "Registers"))
        __sortingEnabled = self.registers.isSortingEnabled()
        self.registers.setSortingEnabled(False)
        item = self.registers.item(0)
        item.setText(_translate("Simulator", "x0   : 0x00000000"))
        item = self.registers.item(1)
        item.setText(_translate("Simulator", "x1   : 0x00000000"))
        item = self.registers.item(2)
        item.setText(_translate("Simulator", "x2   : 0x00000000"))
        item = self.registers.item(3)
        item.setText(_translate("Simulator", "x3   : 0x00000000"))
        item = self.registers.item(4)
        item.setText(_translate("Simulator", "x4   : 0x00000000"))
        item = self.registers.item(5)
        item.setText(_translate("Simulator", "x5   : 0x00000000"))
        item = self.registers.item(6)
        item.setText(_translate("Simulator", "x6   : 0x00000000"))
        item = self.registers.item(7)
        item.setText(_translate("Simulator", "x7   : 0x00000000"))
        item = self.registers.item(8)
        item.setText(_translate("Simulator", "x8   : 0x00000000"))
        item = self.registers.item(9)
        item.setText(_translate("Simulator", "x9   : 0x00000000"))
        item = self.registers.item(10)
        item.setText(_translate("Simulator", "x10 : 0x00000000"))
        item = self.registers.item(11)
        item.setText(_translate("Simulator", "x11 : 0x00000000"))
        item = self.registers.item(12)
        item.setText(_translate("Simulator", "x12 : 0x00000000"))
        item = self.registers.item(13)
        item.setText(_translate("Simulator", "x13 : 0x00000000"))
        item = self.registers.item(14)
        item.setText(_translate("Simulator", "x14 : 0x00000000"))
        item = self.registers.item(15)
        item.setText(_translate("Simulator", "x15 : 0x00000000"))
        item = self.registers.item(16)
        item.setText(_translate("Simulator", "x16 : 0x00000000"))
        item = self.registers.item(17)
        item.setText(_translate("Simulator", "x17 : 0x00000000"))
        item = self.registers.item(18)
        item.setText(_translate("Simulator", "x18 : 0x00000000"))
        item = self.registers.item(19)
        item.setText(_translate("Simulator", "x19 : 0x00000000"))
        item = self.registers.item(20)
        item.setText(_translate("Simulator", "x20 : 0x00000000"))
        item = self.registers.item(21)
        item.setText(_translate("Simulator", "x21 : 0x00000000"))
        item = self.registers.item(22)
        item.setText(_translate("Simulator", "x22 : 0x00000000"))
        item = self.registers.item(23)
        item.setText(_translate("Simulator", "x23 : 0x00000000"))
        item = self.registers.item(24)
        item.setText(_translate("Simulator", "x24 : 0x00000000"))
        item = self.registers.item(25)
        item.setText(_translate("Simulator", "x25 : 0x00000000"))
        item = self.registers.item(26)
        item.setText(_translate("Simulator", "x26 : 0x00000000"))
        item = self.registers.item(27)
        item.setText(_translate("Simulator", "x27 : 0x00000000"))
        item = self.registers.item(28)
        item.setText(_translate("Simulator", "x28 : 0x00000000"))
        item = self.registers.item(29)
        item.setText(_translate("Simulator", "x29 : 0x00000000"))
        item = self.registers.item(30)
        item.setText(_translate("Simulator", "x30 : 0x00000000"))
        item = self.registers.item(31)
        item.setText(_translate("Simulator", "x31 : 0x00000000"))
        self.registers.setSortingEnabled(__sortingEnabled)
        self.groupBox_2.setTitle(_translate("Simulator", "Instruction Segment"))
        self.groupBox_3.setTitle(_translate("Simulator", "Data Segment"))
        self.Run.setText(_translate("Simulator", "Run"))
        self.Step.setText(_translate("Simulator", "Step"))
        self.Reset.setText(_translate("Simulator", "Reset"))
        self.clockCycles.setText(_translate("Simulator", "Clock Cycles : "))
        self.PC.setText(_translate("Simulator", "PC : "))
        self.IR.setText(_translate("Simulator", "IR :"))
        self.groupBox_4.setTitle(_translate("Simulator", "Single Cycle Execution"))
        self.groupBox_5.setTitle(_translate("Simulator", "Display"))
        self.label.setText(_translate("Simulator", "Fetch :"))
        self.label_2.setText(_translate("Simulator", "Decode :"))
        self.label_3.setText(_translate("Simulator", "Execute :"))
        self.label_4.setText(_translate("Simulator", "Memory Access :"))
        self.label_5.setText(_translate("Simulator", "Register Update :"))

    def makeReadOnly(self):
        self.PC.setReadOnly(True)
        self.IR.setReadOnly(True)
        self.clockCycles.setReadOnly(True)
        self.fetch.setReadOnly(True)
        self.decode.setReadOnly(True)
        self.execute.setReadOnly(True)
        self.memoryAccess.setReadOnly(True)
        self.registerUpdate.setReadOnly(True)

    def updateRegisters(self):
        _translate = QtCore.QCoreApplication.translate
        for i in range(32):
            item = self.registers.item(i)
            item.setText(_translate("Simulator", "x"+str(i)+("   " if i<10 else " ")+": 0x"+str(hex(int("".join(main.registerFile[i]), 2))[2:]).upper().zfill(8)))

    def updateClock(self):
        self.clockCycles.setText("Clock Cycles : "+str(main.clock))

    def updateFetch(self):
        self.fetch.setText("0x"+str(hex(int("".join(main.IR), 2))[2:]).upper().zfill(8))

    def updatePC(self):
        self.PC.setText("PC : 0x"+str(hex(int("".join(main.PC), 2))[2:]).upper().zfill(8))

    def updateIR(self):
        self.IR.setText("IR : 0x" + str(hex(int("".join(main.IR), 2))[2:]).upper().zfill(8))

    def updateDecode(self):
        self.decode.setText("0x"+str(hex(int("".join(main.IR), 2))[2:]).upper().zfill(8))
        self.fetch.setText("")

    #to be executed only once
    def showInstructionSegment(self):
        i=0
        _translate = QtCore.QCoreApplication.translate
        for key,val in main.instructionSegment.items():
            item = QtWidgets.QListWidgetItem()
            self.instructionSegment.addItem(item)
            item.setText(_translate("Simulator", "0x"+str(hex(int(key, 2)))[2:].upper()+" "+"0x"+str(hex(int(val, 2)))[2:].upper().zfill(8)))

    def showDataSegment(self):
        i=0
        _translate = QtCore.QCoreApplication.translate
        for key in sorted(main.dataSegment):
            val = main.dataSegment[key]
            item = QtWidgets.QListWidgetItem()
            self.dataSegment.addItem(item)
            item.setText(_translate("Simulator", "0x"+str(hex(int(key, 2)))[2:].upper()+" "+"0x"+str(hex(int(val, 2)))[2:].upper().zfill(2)))

    def changeColor(self):
        item = self.instructionSegment.item(self.currentInstruction)
        item.setBackground(self.white)
        if(ui.run):
            self.instructionSegment.item(self.instructionSegment.count()-1).setBackground(self.green)
        elif self.resetID==1:
            pass
        else:
            item = self.instructionSegment.item(self.nextInstruction)
            item.setBackground(self.green)

    def changeRegisterColor(self):
        if(self.prevRd!=-1):
            item = self.registers.item(self.prevRd)
            item.setBackground(self.white)
        if(self.run):
            pass
        elif(self.resetID!=1):
            if(main.rd!=""):
                self.currRd = int(main.rd, 2)
                item = self.registers.item(self.currRd)
                item.setBackground(self.registerColor)

            self.prevRd = self.currRd


    def eraseData(self):
        self.dataSegment.clear()

    def disableReset(self):
        self.Reset.setEnabled(False)
        self.Run.setEnabled(False)
        self.Step.setEnabled(False)

    def eraseText(self):
        self.PC.setText("PC :")
        self.IR.setText("IR :")
        self.clockCycles.setText("Clock Cycles :")
        self.fetch.setText("")
        self.decode.setText("")
        self.execute.setText("")
        self.memoryAccess.setText("")
        self.registerUpdate.setText("")

    def showDisplay(self):
        self.display.setText(main.display)


def gui():
    global ui
    app = QtWidgets.QApplication(sys.argv)
    Simulator = QtWidgets.QDialog()
    ui = Ui_Simulator()
    ui.setupUi(Simulator)
    ui.showInstructionSegment()
    ui.showDataSegment()
    Simulator.show()
    sys.exit(app.exec_())


def man():
    # if (len(sys.argv) > 2):
    #     print("Invalid input file, Re-enter File name")
    #     exit(0)
    # elif(not(sys.argv[1][-1]=='c' and sys.argv[1][-2]=='m' and sys.argv[1][-3]=='.')):
    #     print("Invalid file format, Re-enter .mc file")
    #     exit(0)
    # else:
    #     try:
    #         f = open(sys.argv[1],'r')
    #     except OSError:
    #         print("Invalid input file, Re-enter File name")
    #         exit(0)
    #     else:
    main.file_name = sys.argv[1]
    print("::::::::::< RISC V SIMULATOR >:::::::::::::\n")
    print("Select the configuration in which you wish to run the simulator")
    print("Enter 1 to run gui")
    print("Enter any other key to run on terminal")
    flag = int(input("Enter your choice : "))
    print()
    main.loadDataSegment()
    main.loadInstructionSegment()
    if (flag == 1):
        gui()
    else:
        main.terminal()


def step():
    if ui.isCompleted:
        return 0
    main.clock += 1
    ui.updateClock()
    main.fetchInstruction()
    ui.updatePC()
    ui.updateIR()
    ui.changeColor()
    if (int("".join(main.IR), 2) == 0):
        ui.isCompleted = True
        ui.run = True
        ui.disableReset()
    main.decodeInstruction()
    main.executeInstruction()
    main.memoryAccess()
    main.registerUpdate()
    ui.changeRegisterColor()
    ui.currentInstruction = ui.nextInstruction
    main.instructionAddressGeneration()
    ui.nextInstruction = (main.two2dec(main.PC))//4
    ui.updateFetch()
    ui.updateRegisters()
    ui.eraseData()
    ui.showDataSegment()
    ui.showDisplay()
    main.display=""


def run():
    if ui.isCompleted:
        return 0
    while(True):
        main.clock += 1
        ui.updateClock()
        main.fetchInstruction()
        ui.updateFetch()
        if (int("".join(main.IR), 2) == 0):
            break
        main.decodeInstruction()
        main.executeInstruction()
        main.memoryAccess()
        main.registerUpdate()
        main.instructionAddressGeneration()
    ui.run = True
    ui.changeRegisterColor()
    ui.updateRegisters()
    main.fileUpdate()
    ui.eraseData()
    ui.showDataSegment()
    ui.changeColor()
    ui.disableReset()
    ui.updateIR()
    ui.updatePC()
    ui.isCompleted = True
    main.display = "EXECUTED SUCCESSFULLY !!!"
    ui.showDisplay()

def reset():
    ui.resetID=1
    main.resetSimulator()
    ui.updateRegisters()
    ui.dataSegment.clear()
    ui.showDataSegment()
    ui.eraseText()
    ui.currentInstruction = ui.nextInstruction
    ui.changeColor()
    ui.instructionSegment.clear()
    ui.showInstructionSegment()
    ui.eraseData()
    ui.showDataSegment()
    ui.changeRegisterColor()
    ui.run = False
    ui.isCompleted = False
    ui.prevRd = -1
    ui.currRd = -1
    ui.currentInstruction = 0
    ui.nextInstruction = 0
    ui.resetID=0

man()
